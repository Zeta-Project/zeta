# This is the main configuration file for the application.
# ~~~~~

# application will be served behind a load balancer
#play.http.context="/api/"


zeta {
  webapp {
    host = "localhost"
    port = 8080
  }
}

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
play.http.filters = "de.htwg.zeta.server.util.Filters"

# The application DI modules
# ~~~~~
play.modules.enabled += "de.htwg.zeta.persistence.PersistenceModule"
play.modules.enabled += "de.htwg.zeta.server.module.JsonFormatModule"
play.modules.enabled += "de.htwg.zeta.server.module.GdslModule"
play.modules.enabled += "de.htwg.zeta.server.silhouette.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# Akka config
#akka {
# actor.provider = "akka.cluster.ClusterActorRefProvider"
#
# remote.netty.tcp.port=0

#loglevel = "INFO"
#jvm-exit-on-fatal-error=off
#}


# Security Filter Configuration - Content Security Policy
play.filters.headers {
  contentSecurityPolicy = "default-src 'self';"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data: *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' data: fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-eval' 'unsafe-inline' clef.io cdnjs.cloudflare.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' ws: twitter.com *.xing.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" frame-src clef.io;"
}

# CSRF Configuration
play.filters.csrf.contentType.whiteList = [
  "application/json",
  "application/zip",
  "text/html",
  "text/plain"
]

#play.akka.config = "akka"

akka {

  cluster {
    client {
      # If connection to the receptionist is not established the client will buffer
      # this number of messages and deliver them the connection is established.
      # When the buffer is full old messages will be dropped when new messages are sent
      # via the client. Use 0 to disable buffering, i.e. messages will be dropped
      # immediately if the location of the singleton is unknown.
      # Maximum allowed buffer size is 10000.
      buffer-size = 100
    }
  }

  remote.netty.tcp.port = 0
  # remote.netty.tcp.hostname=127.0.0.1

  actor {
    kryo {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small overhead
      # nograph does not support object grpahs with shared nodes, but is usually faster
      type = "graph"


      # Possible values for idstrategy are:
      # default, explicit, incremental
      #
      # default - slowest and produces bigger serialized representation. Contains fully-
      # qualified class names (FQCNs) for each class
      #
      # explicit - fast and produces compact serialized representation. Requires that all
      # classes that will be serialized are pre-registered using the "mappings" and "classes"
      # sections. To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to provide exactly the same entries in the "mappings" section
      #
      # incremental - fast and produces compact serialized representation. Support optional
      # pre-registering of classes using the "mappings" and "classes" sections. If class is
      # not pre-registered, it will be registered dynamically by picking a next available id
      # To guarantee that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section

      idstrategy = "default"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they exceed maxBufferSize and an exception is thrown. Can be -1 for no maximum.
      max-buffer-size = -1

      # Define a default size for serializer pool
      serializer-pool-size = 16

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # Enable transparent compression of serialized messages
      # accepted values are: off | lz4 | deflate
      compression = off

      # Log implicitly registered classes. Useful, if you want to know all classes
      # which are serialized
      implicit-registration-logging = false

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and lowl-level tweaking
      kryo-trace = false

      # If enabled, Kryo uses internally a map detecting shared nodes.
      # This is a preferred mode for big object graphs with a lot of nodes.
      # For small object graphs (e.g. below 10 nodes) set it to false for
      # better performance.
      kryo-reference-map = true

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is mandatory for idstartegy=explciit
      # This section is optional  for idstartegy=incremental
      # This section is ignored   for idstartegy=default
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        # fully.qualified.classname1 = id1
        # fully.qualified.classname2 = id2
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is optional  for idstartegy=incremental
      # This section is ignored   for idstartegy=default
      # This section is optional  for idstartegy=explicit
      classes = [
        # fully.qualified.classname2
      ]
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = kryo
    }
  }

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  persistence {
    journal.plugin = "akka.persistence.journal.leveldb-shared"
    journal.leveldb-shared.store {
      # DO NOT USE 'native = off' IN PRODUCTION !!!
      native = off
      dir = "target/shared-journal"
    }
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/snapshots"
  }

}

include "silhouette.conf"
