<scalastyle>
 <name>Scalastyle standard configuration</name>
 <check enabled="true" class="org.scalastyle.file.FileLengthChecker" level="warning">
  <parameters>
   <parameter name="maxFileLength"><![CDATA[500]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.file.FileLineLengthChecker" level="warning">
  <parameters>
   <parameter name="maxLineLength"><![CDATA[160]]></parameter>
   <parameter name="tabSize"><![CDATA[2]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.file.FileTabChecker" level="warning"/>
 <check enabled="false" class="org.scalastyle.file.HeaderMatchesChecker" level="warning">
  <parameters>
   <parameter name="regex">false</parameter>
   <parameter name="header">// Copyright \(C\) 2011-2012 the original author or authors.</parameter>
  </parameters>
 </check>

 <!-- Disabled because does not fit code-style -->
 <check enabled="false" class="org.scalastyle.file.IndentationChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.file.NewLineAtEofChecker" level="warning"/>
 <check enabled="false" class="org.scalastyle.file.NoNewLineAtEofChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.file.RegexChecker" level="warning">
  <parameters>
   <parameter name="regex"><![CDATA[^println|^print]]></parameter>
  </parameters>
  <customMessage>Use logger instead of println or print!</customMessage>
 </check>
 <check enabled="true" class="org.scalastyle.file.WhitespaceEndOfLineChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.BlockImportChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.ClassNamesChecker" level="warning">
  <parameters>
   <parameter name="regex">^[A-Z][A-Za-z]*$</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.ClassTypeParameterChecker" level="warning">
  <parameters>
   <parameter name="regex">^_|[A-Z]{1,4}$</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.CovariantEqualsChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" level="warning">
  <parameters>
   <parameter name="maximum"><![CDATA[10]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.DeprecatedJavaChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">LPAREN</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">COLON, COMMA, RPAREN</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.EmptyClassChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">COLON, IF</parameter>
  </parameters>
 </check>
 <check enabled="false" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" level="warning">
  <parameters>
   <parameter name="tokens">LPAREN</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.EqualsHashCodeChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.FieldNamesChecker" level="warning">
  <parameters>
   <parameter name="regex">^[a-z][A-Za-z0-9]*$</parameter>
   <parameter name="objectFieldRegex">^[a-z][A-Za-z0-9]*$</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.ForBraceChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.IfBraceChecker" level="warning">
  <parameters>
   <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
   <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.IllegalImportsChecker" level="error">
  <parameters>
   <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.ImportGroupingChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.ImportOrderChecker" level="warning">
  <parameters>
   <parameter name="lexicographic">true</parameter>
   <parameter name="groups">java,scala,others</parameter>
   <parameter name="group.java">javax?\..+</parameter>
   <parameter name="group.scala">scala\..+</parameter>
   <parameter name="group.others">.+</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.MagicNumberChecker" level="warning">
  <parameters>
   <parameter name="ignore"><![CDATA[-1,0,1,2]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.MethodLengthChecker" level="warning">
  <parameters>
   <parameter name="maxLength"><![CDATA[50]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.MethodNamesChecker" level="warning">
  <parameters>
   <parameter name="regex"><![CDATA[^\$?[a-z][A-Za-z0-9]*$]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" level="warning">
  <parameters>
   <parameter name="allowed">1</parameter>
   <parameter name="ignoreRegex"><![CDATA[^"?.{0,2}"$]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.NoCloneChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.NoFinalizeChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.NonASCIICharacterChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.NotImplementedErrorUsage" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.NullChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" level="warning">
  <parameters>
   <parameter name="maxMethods"><![CDATA[30]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.NumberOfTypesChecker" level="warning">
  <parameters>
   <parameter name="maxTypes"><![CDATA[20]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.ObjectNamesChecker" level="warning">
  <parameters>
   <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.PackageObjectNamesChecker" level="warning">
  <parameters>
   <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.ParameterNumberChecker" level="warning">
  <parameters>
   <parameter name="maxParameters"><![CDATA[8]]></parameter>
  </parameters>
 </check>
 <check enabled="false" class="org.scalastyle.scalariform.PatternMatchAlignChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" level="warning">
  <parameters>
   <parameter name="ignoreOverride">true</parameter>
  </parameters>ReturnChecker
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.RedundantIfChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.ReturnChecker" level="warning"/>
 <check enabled="false" class="org.scalastyle.scalariform.ScalaDocChecker" level="warning">
  <parameters>
   <parameter name="ignoreRegex">(.*Spec$)|(.*SpecIT$)</parameter>
  </parameters>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.StructuralTypeChecker" level="warning"/>
 <check enabled="false" class="org.scalastyle.scalariform.TodoCommentChecker" level="warning">
  <parameters>
   <parameter default="TODO|FIXME" type="string" name="words"/>
  </parameters>
 </check>
 <check enabled="false" class="org.scalastyle.scalariform.TokenChecker" level="warning">
  <parameters>
   <parameter name="regex">^[ai]sInstanceOf$</parameter>
  </parameters>
  <customMessage>Avoid casting.</customMessage>
 </check>
 <check enabled="true" class="org.scalastyle.scalariform.UnderscoreImportChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.UppercaseLChecker" level="warning"/>
 <!-- TODO should be on error in the future -->
 <check enabled="true" class="org.scalastyle.scalariform.VarFieldChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.VarLocalChecker" level="warning"/>
 <check enabled="true" class="org.scalastyle.scalariform.WhileChecker" level="error"/>
 <check enabled="true" class="org.scalastyle.scalariform.XmlLiteralChecker" level="warning"/>
</scalastyle>